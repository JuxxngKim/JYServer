// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace Example {
class PlayerData;
struct PlayerDataDefaultTypeInternal;
extern PlayerDataDefaultTypeInternal _PlayerData_default_instance_;
}  // namespace Example
PROTOBUF_NAMESPACE_OPEN
template<> ::Example::PlayerData* Arena::CreateMaybeMessage<::Example::PlayerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Example {

// ===================================================================

class PlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Example.PlayerData) */ {
 public:
  inline PlayerData() : PlayerData(nullptr) {}
  ~PlayerData() override;
  explicit constexpr PlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerData(const PlayerData& from);
  PlayerData(PlayerData&& from) noexcept
    : PlayerData() {
    *this = ::std::move(from);
  }

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerData& operator=(PlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerData* internal_default_instance() {
    return reinterpret_cast<const PlayerData*>(
               &_PlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerData& a, PlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerData* New() const final {
    return new PlayerData();
  }

  PlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Example.PlayerData";
  }
  protected:
  explicit PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kPlayerNameFieldNumber = 2,
    kLevelFieldNumber = 3,
    kStateFieldNumber = 4,
  };
  // repeated string items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // int32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Example.PlayerState state = 4;
  void clear_state();
  ::Example::PlayerState state() const;
  void set_state(::Example::PlayerState value);
  private:
  ::Example::PlayerState _internal_state() const;
  void _internal_set_state(::Example::PlayerState value);
  public:

  // @@protoc_insertion_point(class_scope:Example.PlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerData

// string player_id = 1;
inline void PlayerData::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& PlayerData::player_id() const {
  // @@protoc_insertion_point(field_get:Example.PlayerData.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerData::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Example.PlayerData.player_id)
}
inline std::string* PlayerData::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:Example.PlayerData.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& PlayerData::_internal_player_id() const {
  return player_id_.Get();
}
inline void PlayerData::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerData::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerData::release_player_id() {
  // @@protoc_insertion_point(field_release:Example.PlayerData.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerData::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Example.PlayerData.player_id)
}

// string player_name = 2;
inline void PlayerData::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& PlayerData::player_name() const {
  // @@protoc_insertion_point(field_get:Example.PlayerData.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerData::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Example.PlayerData.player_name)
}
inline std::string* PlayerData::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:Example.PlayerData.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& PlayerData::_internal_player_name() const {
  return player_name_.Get();
}
inline void PlayerData::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerData::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerData::release_player_name() {
  // @@protoc_insertion_point(field_release:Example.PlayerData.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerData::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Example.PlayerData.player_name)
}

// int32 level = 3;
inline void PlayerData::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerData::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerData::level() const {
  // @@protoc_insertion_point(field_get:Example.PlayerData.level)
  return _internal_level();
}
inline void PlayerData::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PlayerData::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Example.PlayerData.level)
}

// .Example.PlayerState state = 4;
inline void PlayerData::clear_state() {
  state_ = 0;
}
inline ::Example::PlayerState PlayerData::_internal_state() const {
  return static_cast< ::Example::PlayerState >(state_);
}
inline ::Example::PlayerState PlayerData::state() const {
  // @@protoc_insertion_point(field_get:Example.PlayerData.state)
  return _internal_state();
}
inline void PlayerData::_internal_set_state(::Example::PlayerState value) {
  
  state_ = value;
}
inline void PlayerData::set_state(::Example::PlayerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Example.PlayerData.state)
}

// repeated string items = 5;
inline int PlayerData::_internal_items_size() const {
  return items_.size();
}
inline int PlayerData::items_size() const {
  return _internal_items_size();
}
inline void PlayerData::clear_items() {
  items_.Clear();
}
inline std::string* PlayerData::add_items() {
  // @@protoc_insertion_point(field_add_mutable:Example.PlayerData.items)
  return _internal_add_items();
}
inline const std::string& PlayerData::_internal_items(int index) const {
  return items_.Get(index);
}
inline const std::string& PlayerData::items(int index) const {
  // @@protoc_insertion_point(field_get:Example.PlayerData.items)
  return _internal_items(index);
}
inline std::string* PlayerData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Example.PlayerData.items)
  return items_.Mutable(index);
}
inline void PlayerData::set_items(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Example.PlayerData.items)
  items_.Mutable(index)->assign(value);
}
inline void PlayerData::set_items(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Example.PlayerData.items)
  items_.Mutable(index)->assign(std::move(value));
}
inline void PlayerData::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Example.PlayerData.items)
}
inline void PlayerData::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Example.PlayerData.items)
}
inline std::string* PlayerData::_internal_add_items() {
  return items_.Add();
}
inline void PlayerData::add_items(const std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Example.PlayerData.items)
}
inline void PlayerData::add_items(std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Example.PlayerData.items)
}
inline void PlayerData::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Example.PlayerData.items)
}
inline void PlayerData::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Example.PlayerData.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PlayerData::items() const {
  // @@protoc_insertion_point(field_list:Example.PlayerData.items)
  return items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PlayerData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Example.PlayerData.items)
  return &items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
