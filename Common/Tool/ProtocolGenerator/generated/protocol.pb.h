// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto
#pragma warning(disable: 4244)
#pragma warning(disable: 4267)

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace jy {
class NetAliveAck;
struct NetAliveAckDefaultTypeInternal;
extern NetAliveAckDefaultTypeInternal _NetAliveAck_default_instance_;
class NetAliveReq;
struct NetAliveReqDefaultTypeInternal;
extern NetAliveReqDefaultTypeInternal _NetAliveReq_default_instance_;
class NetConnect;
struct NetConnectDefaultTypeInternal;
extern NetConnectDefaultTypeInternal _NetConnect_default_instance_;
class NetDisconnect;
struct NetDisconnectDefaultTypeInternal;
extern NetDisconnectDefaultTypeInternal _NetDisconnect_default_instance_;
}  // namespace jy
PROTOBUF_NAMESPACE_OPEN
template<> ::jy::NetAliveAck* Arena::CreateMaybeMessage<::jy::NetAliveAck>(Arena*);
template<> ::jy::NetAliveReq* Arena::CreateMaybeMessage<::jy::NetAliveReq>(Arena*);
template<> ::jy::NetConnect* Arena::CreateMaybeMessage<::jy::NetConnect>(Arena*);
template<> ::jy::NetDisconnect* Arena::CreateMaybeMessage<::jy::NetDisconnect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jy {

// ===================================================================

class NetConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.NetConnect) */ {
 public:
  inline NetConnect() : NetConnect(nullptr) {}
  ~NetConnect() override;
  explicit constexpr NetConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetConnect(const NetConnect& from);
  NetConnect(NetConnect&& from) noexcept
    : NetConnect() {
    *this = ::std::move(from);
  }

  inline NetConnect& operator=(const NetConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetConnect& operator=(NetConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetConnect* internal_default_instance() {
    return reinterpret_cast<const NetConnect*>(
               &_NetConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetConnect& a, NetConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetConnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetConnect* New() const final {
    return new NetConnect();
  }

  NetConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetConnect& from);
  void MergeFrom(const NetConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.NetConnect";
  }
  protected:
  explicit NetConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectIPFieldNumber = 1,
    kConnectPortFieldNumber = 2,
    kTimeoutMSFieldNumber = 3,
    kServerTimeFieldNumber = 4,
    kMessageIDFieldNumber = 99,
  };
  // optional string ConnectIP = 1 [default = ""];
  bool has_connectip() const;
  private:
  bool _internal_has_connectip() const;
  public:
  void clear_connectip();
  const std::string& connectip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connectip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connectip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_connectip();
  void set_allocated_connectip(std::string* connectip);
  private:
  const std::string& _internal_connectip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connectip(const std::string& value);
  std::string* _internal_mutable_connectip();
  public:

  // optional int32 ConnectPort = 2 [default = 0];
  bool has_connectport() const;
  private:
  bool _internal_has_connectport() const;
  public:
  void clear_connectport();
  ::PROTOBUF_NAMESPACE_ID::int32 connectport() const;
  void set_connectport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_connectport() const;
  void _internal_set_connectport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 TimeoutMS = 3 [default = 0];
  bool has_timeoutms() const;
  private:
  bool _internal_has_timeoutms() const;
  public:
  void clear_timeoutms();
  ::PROTOBUF_NAMESPACE_ID::int32 timeoutms() const;
  void set_timeoutms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeoutms() const;
  void _internal_set_timeoutms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 ServerTime = 4 [default = 0];
  bool has_servertime() const;
  private:
  bool _internal_has_servertime() const;
  public:
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int64 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = NET_CONNECT];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.NetConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connectip_;
  ::PROTOBUF_NAMESPACE_ID::int32 connectport_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeoutms_;
  ::PROTOBUF_NAMESPACE_ID::int64 servertime_;
  int messageid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NetDisconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.NetDisconnect) */ {
 public:
  inline NetDisconnect() : NetDisconnect(nullptr) {}
  ~NetDisconnect() override;
  explicit constexpr NetDisconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetDisconnect(const NetDisconnect& from);
  NetDisconnect(NetDisconnect&& from) noexcept
    : NetDisconnect() {
    *this = ::std::move(from);
  }

  inline NetDisconnect& operator=(const NetDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetDisconnect& operator=(NetDisconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetDisconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetDisconnect* internal_default_instance() {
    return reinterpret_cast<const NetDisconnect*>(
               &_NetDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetDisconnect& a, NetDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(NetDisconnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetDisconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetDisconnect* New() const final {
    return new NetDisconnect();
  }

  NetDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetDisconnect& from);
  void MergeFrom(const NetDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.NetDisconnect";
  }
  protected:
  explicit NetDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDFieldNumber = 99,
  };
  // optional .jy.EMessageID MessageID = 99 [default = NET_DISCONNECT];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.NetDisconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int messageid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NetAliveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.NetAliveReq) */ {
 public:
  inline NetAliveReq() : NetAliveReq(nullptr) {}
  ~NetAliveReq() override;
  explicit constexpr NetAliveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetAliveReq(const NetAliveReq& from);
  NetAliveReq(NetAliveReq&& from) noexcept
    : NetAliveReq() {
    *this = ::std::move(from);
  }

  inline NetAliveReq& operator=(const NetAliveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAliveReq& operator=(NetAliveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetAliveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetAliveReq* internal_default_instance() {
    return reinterpret_cast<const NetAliveReq*>(
               &_NetAliveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetAliveReq& a, NetAliveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAliveReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetAliveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetAliveReq* New() const final {
    return new NetAliveReq();
  }

  NetAliveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetAliveReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetAliveReq& from);
  void MergeFrom(const NetAliveReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAliveReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.NetAliveReq";
  }
  protected:
  explicit NetAliveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestMSFieldNumber = 1,
    kMessageIDFieldNumber = 99,
  };
  // optional int64 RequestMS = 1 [default = 0];
  bool has_requestms() const;
  private:
  bool _internal_has_requestms() const;
  public:
  void clear_requestms();
  ::PROTOBUF_NAMESPACE_ID::int64 requestms() const;
  void set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestms() const;
  void _internal_set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = NET_ALIVE_REQ];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.NetAliveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestms_;
  int messageid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class NetAliveAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.NetAliveAck) */ {
 public:
  inline NetAliveAck() : NetAliveAck(nullptr) {}
  ~NetAliveAck() override;
  explicit constexpr NetAliveAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetAliveAck(const NetAliveAck& from);
  NetAliveAck(NetAliveAck&& from) noexcept
    : NetAliveAck() {
    *this = ::std::move(from);
  }

  inline NetAliveAck& operator=(const NetAliveAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetAliveAck& operator=(NetAliveAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetAliveAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetAliveAck* internal_default_instance() {
    return reinterpret_cast<const NetAliveAck*>(
               &_NetAliveAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetAliveAck& a, NetAliveAck& b) {
    a.Swap(&b);
  }
  inline void Swap(NetAliveAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetAliveAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetAliveAck* New() const final {
    return new NetAliveAck();
  }

  NetAliveAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetAliveAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetAliveAck& from);
  void MergeFrom(const NetAliveAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAliveAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.NetAliveAck";
  }
  protected:
  explicit NetAliveAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestMSFieldNumber = 1,
    kResponseMSFieldNumber = 2,
    kMessageIDFieldNumber = 99,
  };
  // optional int64 RequestMS = 1 [default = 0];
  bool has_requestms() const;
  private:
  bool _internal_has_requestms() const;
  public:
  void clear_requestms();
  ::PROTOBUF_NAMESPACE_ID::int64 requestms() const;
  void set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_requestms() const;
  void _internal_set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 ResponseMS = 2 [default = 0];
  bool has_responsems() const;
  private:
  bool _internal_has_responsems() const;
  public:
  void clear_responsems();
  ::PROTOBUF_NAMESPACE_ID::int64 responsems() const;
  void set_responsems(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_responsems() const;
  void _internal_set_responsems(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = NET_ALIVE_ACK];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.NetAliveAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestms_;
  ::PROTOBUF_NAMESPACE_ID::int64 responsems_;
  int messageid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetConnect

// optional .jy.EMessageID MessageID = 99 [default = NET_CONNECT];
inline bool NetConnect::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetConnect::has_messageid() const {
  return _internal_has_messageid();
}
inline void NetConnect::clear_messageid() {
  messageid_ = 100;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::jy::EMessageID NetConnect::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID NetConnect::messageid() const {
  // @@protoc_insertion_point(field_get:jy.NetConnect.MessageID)
  return _internal_messageid();
}
inline void NetConnect::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  messageid_ = value;
}
inline void NetConnect::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.NetConnect.MessageID)
}

// optional string ConnectIP = 1 [default = ""];
inline bool NetConnect::_internal_has_connectip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetConnect::has_connectip() const {
  return _internal_has_connectip();
}
inline void NetConnect::clear_connectip() {
  connectip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetConnect::connectip() const {
  // @@protoc_insertion_point(field_get:jy.NetConnect.ConnectIP)
  return _internal_connectip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetConnect::set_connectip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 connectip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jy.NetConnect.ConnectIP)
}
inline std::string* NetConnect::mutable_connectip() {
  // @@protoc_insertion_point(field_mutable:jy.NetConnect.ConnectIP)
  return _internal_mutable_connectip();
}
inline const std::string& NetConnect::_internal_connectip() const {
  return connectip_.Get();
}
inline void NetConnect::_internal_set_connectip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connectip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetConnect::_internal_mutable_connectip() {
  _has_bits_[0] |= 0x00000001u;
  return connectip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetConnect::release_connectip() {
  // @@protoc_insertion_point(field_release:jy.NetConnect.ConnectIP)
  if (!_internal_has_connectip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connectip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetConnect::set_allocated_connectip(std::string* connectip) {
  if (connectip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connectip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connectip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jy.NetConnect.ConnectIP)
}

// optional int32 ConnectPort = 2 [default = 0];
inline bool NetConnect::_internal_has_connectport() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetConnect::has_connectport() const {
  return _internal_has_connectport();
}
inline void NetConnect::clear_connectport() {
  connectport_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetConnect::_internal_connectport() const {
  return connectport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetConnect::connectport() const {
  // @@protoc_insertion_point(field_get:jy.NetConnect.ConnectPort)
  return _internal_connectport();
}
inline void NetConnect::_internal_set_connectport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  connectport_ = value;
}
inline void NetConnect::set_connectport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_connectport(value);
  // @@protoc_insertion_point(field_set:jy.NetConnect.ConnectPort)
}

// optional int32 TimeoutMS = 3 [default = 0];
inline bool NetConnect::_internal_has_timeoutms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetConnect::has_timeoutms() const {
  return _internal_has_timeoutms();
}
inline void NetConnect::clear_timeoutms() {
  timeoutms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetConnect::_internal_timeoutms() const {
  return timeoutms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetConnect::timeoutms() const {
  // @@protoc_insertion_point(field_get:jy.NetConnect.TimeoutMS)
  return _internal_timeoutms();
}
inline void NetConnect::_internal_set_timeoutms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  timeoutms_ = value;
}
inline void NetConnect::set_timeoutms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeoutms(value);
  // @@protoc_insertion_point(field_set:jy.NetConnect.TimeoutMS)
}

// optional int64 ServerTime = 4 [default = 0];
inline bool NetConnect::_internal_has_servertime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetConnect::has_servertime() const {
  return _internal_has_servertime();
}
inline void NetConnect::clear_servertime() {
  servertime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetConnect::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetConnect::servertime() const {
  // @@protoc_insertion_point(field_get:jy.NetConnect.ServerTime)
  return _internal_servertime();
}
inline void NetConnect::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  servertime_ = value;
}
inline void NetConnect::set_servertime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:jy.NetConnect.ServerTime)
}

// -------------------------------------------------------------------

// NetDisconnect

// optional .jy.EMessageID MessageID = 99 [default = NET_DISCONNECT];
inline bool NetDisconnect::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetDisconnect::has_messageid() const {
  return _internal_has_messageid();
}
inline void NetDisconnect::clear_messageid() {
  messageid_ = 101;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::jy::EMessageID NetDisconnect::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID NetDisconnect::messageid() const {
  // @@protoc_insertion_point(field_get:jy.NetDisconnect.MessageID)
  return _internal_messageid();
}
inline void NetDisconnect::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  messageid_ = value;
}
inline void NetDisconnect::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.NetDisconnect.MessageID)
}

// -------------------------------------------------------------------

// NetAliveReq

// optional .jy.EMessageID MessageID = 99 [default = NET_ALIVE_REQ];
inline bool NetAliveReq::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetAliveReq::has_messageid() const {
  return _internal_has_messageid();
}
inline void NetAliveReq::clear_messageid() {
  messageid_ = 102;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::jy::EMessageID NetAliveReq::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID NetAliveReq::messageid() const {
  // @@protoc_insertion_point(field_get:jy.NetAliveReq.MessageID)
  return _internal_messageid();
}
inline void NetAliveReq::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  messageid_ = value;
}
inline void NetAliveReq::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.NetAliveReq.MessageID)
}

// optional int64 RequestMS = 1 [default = 0];
inline bool NetAliveReq::_internal_has_requestms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetAliveReq::has_requestms() const {
  return _internal_has_requestms();
}
inline void NetAliveReq::clear_requestms() {
  requestms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveReq::_internal_requestms() const {
  return requestms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveReq::requestms() const {
  // @@protoc_insertion_point(field_get:jy.NetAliveReq.RequestMS)
  return _internal_requestms();
}
inline void NetAliveReq::_internal_set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestms_ = value;
}
inline void NetAliveReq::set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestms(value);
  // @@protoc_insertion_point(field_set:jy.NetAliveReq.RequestMS)
}

// -------------------------------------------------------------------

// NetAliveAck

// optional .jy.EMessageID MessageID = 99 [default = NET_ALIVE_ACK];
inline bool NetAliveAck::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetAliveAck::has_messageid() const {
  return _internal_has_messageid();
}
inline void NetAliveAck::clear_messageid() {
  messageid_ = 103;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::jy::EMessageID NetAliveAck::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID NetAliveAck::messageid() const {
  // @@protoc_insertion_point(field_get:jy.NetAliveAck.MessageID)
  return _internal_messageid();
}
inline void NetAliveAck::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messageid_ = value;
}
inline void NetAliveAck::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.NetAliveAck.MessageID)
}

// optional int64 RequestMS = 1 [default = 0];
inline bool NetAliveAck::_internal_has_requestms() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetAliveAck::has_requestms() const {
  return _internal_has_requestms();
}
inline void NetAliveAck::clear_requestms() {
  requestms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveAck::_internal_requestms() const {
  return requestms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveAck::requestms() const {
  // @@protoc_insertion_point(field_get:jy.NetAliveAck.RequestMS)
  return _internal_requestms();
}
inline void NetAliveAck::_internal_set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  requestms_ = value;
}
inline void NetAliveAck::set_requestms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_requestms(value);
  // @@protoc_insertion_point(field_set:jy.NetAliveAck.RequestMS)
}

// optional int64 ResponseMS = 2 [default = 0];
inline bool NetAliveAck::_internal_has_responsems() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetAliveAck::has_responsems() const {
  return _internal_has_responsems();
}
inline void NetAliveAck::clear_responsems() {
  responsems_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveAck::_internal_responsems() const {
  return responsems_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetAliveAck::responsems() const {
  // @@protoc_insertion_point(field_get:jy.NetAliveAck.ResponseMS)
  return _internal_responsems();
}
inline void NetAliveAck::_internal_set_responsems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  responsems_ = value;
}
inline void NetAliveAck::set_responsems(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_responsems(value);
  // @@protoc_insertion_point(field_set:jy.NetAliveAck.ResponseMS)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
