// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sprotocol.proto

#pragma warning(disable: 4244)
#pragma warning(disable: 4267)

#ifndef GOOGLE_PROTOBUF_INCLUDED_sprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sprotocol_2eproto;
namespace jy {
class ADLoginReq;
struct ADLoginReqDefaultTypeInternal;
extern ADLoginReqDefaultTypeInternal _ADLoginReq_default_instance_;
class DALoginAck;
struct DALoginAckDefaultTypeInternal;
extern DALoginAckDefaultTypeInternal _DALoginAck_default_instance_;
class DALoginNak;
struct DALoginNakDefaultTypeInternal;
extern DALoginNakDefaultTypeInternal _DALoginNak_default_instance_;
class InternalEventTick;
struct InternalEventTickDefaultTypeInternal;
extern InternalEventTickDefaultTypeInternal _InternalEventTick_default_instance_;
class NullMessage;
struct NullMessageDefaultTypeInternal;
extern NullMessageDefaultTypeInternal _NullMessage_default_instance_;
}  // namespace jy
PROTOBUF_NAMESPACE_OPEN
template<> ::jy::ADLoginReq* Arena::CreateMaybeMessage<::jy::ADLoginReq>(Arena*);
template<> ::jy::DALoginAck* Arena::CreateMaybeMessage<::jy::DALoginAck>(Arena*);
template<> ::jy::DALoginNak* Arena::CreateMaybeMessage<::jy::DALoginNak>(Arena*);
template<> ::jy::InternalEventTick* Arena::CreateMaybeMessage<::jy::InternalEventTick>(Arena*);
template<> ::jy::NullMessage* Arena::CreateMaybeMessage<::jy::NullMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace jy {

// ===================================================================

class NullMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.NullMessage) */ {
 public:
  inline NullMessage() : NullMessage(nullptr) {}
  ~NullMessage() override;
  explicit constexpr NullMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullMessage(const NullMessage& from);
  NullMessage(NullMessage&& from) noexcept
    : NullMessage() {
    *this = ::std::move(from);
  }

  inline NullMessage& operator=(const NullMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullMessage& operator=(NullMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullMessage* internal_default_instance() {
    return reinterpret_cast<const NullMessage*>(
               &_NullMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NullMessage& a, NullMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NullMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NullMessage* New() const final {
    return new NullMessage();
  }

  NullMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NullMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NullMessage& from);
  void MergeFrom(const NullMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NullMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.NullMessage";
  }
  protected:
  explicit NullMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 95,
    kMessageIDFieldNumber = 99,
  };
  // optional .jy.EErrorMsg Error = 95 [default = E_UNKNOWN];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::jy::EErrorMsg error() const;
  void set_error(::jy::EErrorMsg value);
  private:
  ::jy::EErrorMsg _internal_error() const;
  void _internal_set_error(::jy::EErrorMsg value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = NULL_MESSAGE];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.NullMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int error_;
  int messageid_;
  friend struct ::TableStruct_sprotocol_2eproto;
};
// -------------------------------------------------------------------

class InternalEventTick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.InternalEventTick) */ {
 public:
  inline InternalEventTick() : InternalEventTick(nullptr) {}
  ~InternalEventTick() override;
  explicit constexpr InternalEventTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalEventTick(const InternalEventTick& from);
  InternalEventTick(InternalEventTick&& from) noexcept
    : InternalEventTick() {
    *this = ::std::move(from);
  }

  inline InternalEventTick& operator=(const InternalEventTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalEventTick& operator=(InternalEventTick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalEventTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalEventTick* internal_default_instance() {
    return reinterpret_cast<const InternalEventTick*>(
               &_InternalEventTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalEventTick& a, InternalEventTick& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalEventTick* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalEventTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalEventTick* New() const final {
    return new InternalEventTick();
  }

  InternalEventTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalEventTick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalEventTick& from);
  void MergeFrom(const InternalEventTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalEventTick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.InternalEventTick";
  }
  protected:
  explicit InternalEventTick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kEventTypeFieldNumber = 1,
    kMessageIDFieldNumber = 99,
  };
  // optional int64 Value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 EventType = 1;
  bool has_eventtype() const;
  private:
  bool _internal_has_eventtype() const;
  public:
  void clear_eventtype();
  ::PROTOBUF_NAMESPACE_ID::int32 eventtype() const;
  void set_eventtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventtype() const;
  void _internal_set_eventtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = INTERNAL_EVENT_TICK];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.InternalEventTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventtype_;
  int messageid_;
  friend struct ::TableStruct_sprotocol_2eproto;
};
// -------------------------------------------------------------------

class ADLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.ADLoginReq) */ {
 public:
  inline ADLoginReq() : ADLoginReq(nullptr) {}
  ~ADLoginReq() override;
  explicit constexpr ADLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADLoginReq(const ADLoginReq& from);
  ADLoginReq(ADLoginReq&& from) noexcept
    : ADLoginReq() {
    *this = ::std::move(from);
  }

  inline ADLoginReq& operator=(const ADLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADLoginReq& operator=(ADLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADLoginReq* internal_default_instance() {
    return reinterpret_cast<const ADLoginReq*>(
               &_ADLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ADLoginReq& a, ADLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ADLoginReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ADLoginReq* New() const final {
    return new ADLoginReq();
  }

  ADLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ADLoginReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ADLoginReq& from);
  void MergeFrom(const ADLoginReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADLoginReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.ADLoginReq";
  }
  protected:
  explicit ADLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPIDFieldNumber = 1,
    kMessageIDFieldNumber = 99,
  };
  // required string PID = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // optional .jy.EMessageID MessageID = 99 [default = AD_LOGIN_REQ];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.ADLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  int messageid_;
  friend struct ::TableStruct_sprotocol_2eproto;
};
// -------------------------------------------------------------------

class DALoginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.DALoginAck) */ {
 public:
  inline DALoginAck() : DALoginAck(nullptr) {}
  ~DALoginAck() override;
  explicit constexpr DALoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DALoginAck(const DALoginAck& from);
  DALoginAck(DALoginAck&& from) noexcept
    : DALoginAck() {
    *this = ::std::move(from);
  }

  inline DALoginAck& operator=(const DALoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline DALoginAck& operator=(DALoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DALoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const DALoginAck* internal_default_instance() {
    return reinterpret_cast<const DALoginAck*>(
               &_DALoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DALoginAck& a, DALoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(DALoginAck* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DALoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DALoginAck* New() const final {
    return new DALoginAck();
  }

  DALoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DALoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DALoginAck& from);
  void MergeFrom(const DALoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DALoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.DALoginAck";
  }
  protected:
  explicit DALoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPIDFieldNumber = 1,
    kPlayerNameFieldNumber = 4,
    kAccountIdFieldNumber = 2,
    kGameDbIdFieldNumber = 3,
    kMessageIDFieldNumber = 99,
  };
  // required string PID = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // required string PlayerName = 4;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // required int64 AccountId = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  ::PROTOBUF_NAMESPACE_ID::int64 accountid() const;
  void set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accountid() const;
  void _internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 GameDbId = 3;
  bool has_gamedbid() const;
  private:
  bool _internal_has_gamedbid() const;
  public:
  void clear_gamedbid();
  ::PROTOBUF_NAMESPACE_ID::int32 gamedbid() const;
  void set_gamedbid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamedbid() const;
  void _internal_set_gamedbid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = DA_LOGIN_ACK];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.DALoginAck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  ::PROTOBUF_NAMESPACE_ID::int64 accountid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamedbid_;
  int messageid_;
  friend struct ::TableStruct_sprotocol_2eproto;
};
// -------------------------------------------------------------------

class DALoginNak final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:jy.DALoginNak) */ {
 public:
  inline DALoginNak() : DALoginNak(nullptr) {}
  ~DALoginNak() override;
  explicit constexpr DALoginNak(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DALoginNak(const DALoginNak& from);
  DALoginNak(DALoginNak&& from) noexcept
    : DALoginNak() {
    *this = ::std::move(from);
  }

  inline DALoginNak& operator=(const DALoginNak& from) {
    CopyFrom(from);
    return *this;
  }
  inline DALoginNak& operator=(DALoginNak&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DALoginNak& default_instance() {
    return *internal_default_instance();
  }
  static inline const DALoginNak* internal_default_instance() {
    return reinterpret_cast<const DALoginNak*>(
               &_DALoginNak_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DALoginNak& a, DALoginNak& b) {
    a.Swap(&b);
  }
  inline void Swap(DALoginNak* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DALoginNak* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DALoginNak* New() const final {
    return new DALoginNak();
  }

  DALoginNak* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DALoginNak>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DALoginNak& from);
  void MergeFrom(const DALoginNak& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DALoginNak* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "jy.DALoginNak";
  }
  protected:
  explicit DALoginNak(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPIDFieldNumber = 2,
    kErrorFieldNumber = 1,
    kIsForceLoginFieldNumber = 3,
    kMessageIDFieldNumber = 99,
  };
  // required string PID = 2;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // required .jy.EErrorMsg Error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::jy::EErrorMsg error() const;
  void set_error(::jy::EErrorMsg value);
  private:
  ::jy::EErrorMsg _internal_error() const;
  void _internal_set_error(::jy::EErrorMsg value);
  public:

  // required bool IsForceLogin = 3;
  bool has_isforcelogin() const;
  private:
  bool _internal_has_isforcelogin() const;
  public:
  void clear_isforcelogin();
  bool isforcelogin() const;
  void set_isforcelogin(bool value);
  private:
  bool _internal_isforcelogin() const;
  void _internal_set_isforcelogin(bool value);
  public:

  // optional .jy.EMessageID MessageID = 99 [default = DA_LOGIN_NAK];
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  ::jy::EMessageID messageid() const;
  void set_messageid(::jy::EMessageID value);
  private:
  ::jy::EMessageID _internal_messageid() const;
  void _internal_set_messageid(::jy::EMessageID value);
  public:

  // @@protoc_insertion_point(class_scope:jy.DALoginNak)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
  int error_;
  bool isforcelogin_;
  int messageid_;
  friend struct ::TableStruct_sprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NullMessage

// optional .jy.EMessageID MessageID = 99 [default = NULL_MESSAGE];
inline bool NullMessage::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NullMessage::has_messageid() const {
  return _internal_has_messageid();
}
inline void NullMessage::clear_messageid() {
  messageid_ = 106;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::jy::EMessageID NullMessage::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID NullMessage::messageid() const {
  // @@protoc_insertion_point(field_get:jy.NullMessage.MessageID)
  return _internal_messageid();
}
inline void NullMessage::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  messageid_ = value;
}
inline void NullMessage::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.NullMessage.MessageID)
}

// optional .jy.EErrorMsg Error = 95 [default = E_UNKNOWN];
inline bool NullMessage::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NullMessage::has_error() const {
  return _internal_has_error();
}
inline void NullMessage::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::jy::EErrorMsg NullMessage::_internal_error() const {
  return static_cast< ::jy::EErrorMsg >(error_);
}
inline ::jy::EErrorMsg NullMessage::error() const {
  // @@protoc_insertion_point(field_get:jy.NullMessage.Error)
  return _internal_error();
}
inline void NullMessage::_internal_set_error(::jy::EErrorMsg value) {
  assert(::jy::EErrorMsg_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  error_ = value;
}
inline void NullMessage::set_error(::jy::EErrorMsg value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:jy.NullMessage.Error)
}

// -------------------------------------------------------------------

// InternalEventTick

// optional .jy.EMessageID MessageID = 99 [default = INTERNAL_EVENT_TICK];
inline bool InternalEventTick::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InternalEventTick::has_messageid() const {
  return _internal_has_messageid();
}
inline void InternalEventTick::clear_messageid() {
  messageid_ = 105;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::jy::EMessageID InternalEventTick::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID InternalEventTick::messageid() const {
  // @@protoc_insertion_point(field_get:jy.InternalEventTick.MessageID)
  return _internal_messageid();
}
inline void InternalEventTick::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messageid_ = value;
}
inline void InternalEventTick::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.InternalEventTick.MessageID)
}

// optional int32 EventType = 1;
inline bool InternalEventTick::_internal_has_eventtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InternalEventTick::has_eventtype() const {
  return _internal_has_eventtype();
}
inline void InternalEventTick::clear_eventtype() {
  eventtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InternalEventTick::_internal_eventtype() const {
  return eventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InternalEventTick::eventtype() const {
  // @@protoc_insertion_point(field_get:jy.InternalEventTick.EventType)
  return _internal_eventtype();
}
inline void InternalEventTick::_internal_set_eventtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventtype_ = value;
}
inline void InternalEventTick::set_eventtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventtype(value);
  // @@protoc_insertion_point(field_set:jy.InternalEventTick.EventType)
}

// optional int64 Value = 2;
inline bool InternalEventTick::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InternalEventTick::has_value() const {
  return _internal_has_value();
}
inline void InternalEventTick::clear_value() {
  value_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InternalEventTick::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InternalEventTick::value() const {
  // @@protoc_insertion_point(field_get:jy.InternalEventTick.Value)
  return _internal_value();
}
inline void InternalEventTick::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void InternalEventTick::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:jy.InternalEventTick.Value)
}

// -------------------------------------------------------------------

// ADLoginReq

// optional .jy.EMessageID MessageID = 99 [default = AD_LOGIN_REQ];
inline bool ADLoginReq::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ADLoginReq::has_messageid() const {
  return _internal_has_messageid();
}
inline void ADLoginReq::clear_messageid() {
  messageid_ = 20100;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::jy::EMessageID ADLoginReq::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID ADLoginReq::messageid() const {
  // @@protoc_insertion_point(field_get:jy.ADLoginReq.MessageID)
  return _internal_messageid();
}
inline void ADLoginReq::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  messageid_ = value;
}
inline void ADLoginReq::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.ADLoginReq.MessageID)
}

// required string PID = 1;
inline bool ADLoginReq::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ADLoginReq::has_pid() const {
  return _internal_has_pid();
}
inline void ADLoginReq::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ADLoginReq::pid() const {
  // @@protoc_insertion_point(field_get:jy.ADLoginReq.PID)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADLoginReq::set_pid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jy.ADLoginReq.PID)
}
inline std::string* ADLoginReq::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:jy.ADLoginReq.PID)
  return _internal_mutable_pid();
}
inline const std::string& ADLoginReq::_internal_pid() const {
  return pid_.Get();
}
inline void ADLoginReq::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ADLoginReq::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ADLoginReq::release_pid() {
  // @@protoc_insertion_point(field_release:jy.ADLoginReq.PID)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ADLoginReq::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jy.ADLoginReq.PID)
}

// -------------------------------------------------------------------

// DALoginAck

// optional .jy.EMessageID MessageID = 99 [default = DA_LOGIN_ACK];
inline bool DALoginAck::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DALoginAck::has_messageid() const {
  return _internal_has_messageid();
}
inline void DALoginAck::clear_messageid() {
  messageid_ = 20101;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::jy::EMessageID DALoginAck::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID DALoginAck::messageid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginAck.MessageID)
  return _internal_messageid();
}
inline void DALoginAck::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  messageid_ = value;
}
inline void DALoginAck::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.DALoginAck.MessageID)
}

// required string PID = 1;
inline bool DALoginAck::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DALoginAck::has_pid() const {
  return _internal_has_pid();
}
inline void DALoginAck::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DALoginAck::pid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginAck.PID)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DALoginAck::set_pid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jy.DALoginAck.PID)
}
inline std::string* DALoginAck::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:jy.DALoginAck.PID)
  return _internal_mutable_pid();
}
inline const std::string& DALoginAck::_internal_pid() const {
  return pid_.Get();
}
inline void DALoginAck::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DALoginAck::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DALoginAck::release_pid() {
  // @@protoc_insertion_point(field_release:jy.DALoginAck.PID)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DALoginAck::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jy.DALoginAck.PID)
}

// required int64 AccountId = 2;
inline bool DALoginAck::_internal_has_accountid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DALoginAck::has_accountid() const {
  return _internal_has_accountid();
}
inline void DALoginAck::clear_accountid() {
  accountid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DALoginAck::_internal_accountid() const {
  return accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DALoginAck::accountid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginAck.AccountId)
  return _internal_accountid();
}
inline void DALoginAck::_internal_set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  accountid_ = value;
}
inline void DALoginAck::set_accountid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:jy.DALoginAck.AccountId)
}

// required int32 GameDbId = 3;
inline bool DALoginAck::_internal_has_gamedbid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DALoginAck::has_gamedbid() const {
  return _internal_has_gamedbid();
}
inline void DALoginAck::clear_gamedbid() {
  gamedbid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DALoginAck::_internal_gamedbid() const {
  return gamedbid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DALoginAck::gamedbid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginAck.GameDbId)
  return _internal_gamedbid();
}
inline void DALoginAck::_internal_set_gamedbid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gamedbid_ = value;
}
inline void DALoginAck::set_gamedbid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamedbid(value);
  // @@protoc_insertion_point(field_set:jy.DALoginAck.GameDbId)
}

// required string PlayerName = 4;
inline bool DALoginAck::_internal_has_playername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DALoginAck::has_playername() const {
  return _internal_has_playername();
}
inline void DALoginAck::clear_playername() {
  playername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DALoginAck::playername() const {
  // @@protoc_insertion_point(field_get:jy.DALoginAck.PlayerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DALoginAck::set_playername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jy.DALoginAck.PlayerName)
}
inline std::string* DALoginAck::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:jy.DALoginAck.PlayerName)
  return _internal_mutable_playername();
}
inline const std::string& DALoginAck::_internal_playername() const {
  return playername_.Get();
}
inline void DALoginAck::_internal_set_playername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DALoginAck::_internal_mutable_playername() {
  _has_bits_[0] |= 0x00000002u;
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DALoginAck::release_playername() {
  // @@protoc_insertion_point(field_release:jy.DALoginAck.PlayerName)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return playername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DALoginAck::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jy.DALoginAck.PlayerName)
}

// -------------------------------------------------------------------

// DALoginNak

// optional .jy.EMessageID MessageID = 99 [default = DA_LOGIN_NAK];
inline bool DALoginNak::_internal_has_messageid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DALoginNak::has_messageid() const {
  return _internal_has_messageid();
}
inline void DALoginNak::clear_messageid() {
  messageid_ = 20102;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::jy::EMessageID DALoginNak::_internal_messageid() const {
  return static_cast< ::jy::EMessageID >(messageid_);
}
inline ::jy::EMessageID DALoginNak::messageid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginNak.MessageID)
  return _internal_messageid();
}
inline void DALoginNak::_internal_set_messageid(::jy::EMessageID value) {
  assert(::jy::EMessageID_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  messageid_ = value;
}
inline void DALoginNak::set_messageid(::jy::EMessageID value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:jy.DALoginNak.MessageID)
}

// required .jy.EErrorMsg Error = 1;
inline bool DALoginNak::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DALoginNak::has_error() const {
  return _internal_has_error();
}
inline void DALoginNak::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::jy::EErrorMsg DALoginNak::_internal_error() const {
  return static_cast< ::jy::EErrorMsg >(error_);
}
inline ::jy::EErrorMsg DALoginNak::error() const {
  // @@protoc_insertion_point(field_get:jy.DALoginNak.Error)
  return _internal_error();
}
inline void DALoginNak::_internal_set_error(::jy::EErrorMsg value) {
  assert(::jy::EErrorMsg_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void DALoginNak::set_error(::jy::EErrorMsg value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:jy.DALoginNak.Error)
}

// required string PID = 2;
inline bool DALoginNak::_internal_has_pid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DALoginNak::has_pid() const {
  return _internal_has_pid();
}
inline void DALoginNak::clear_pid() {
  pid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DALoginNak::pid() const {
  // @@protoc_insertion_point(field_get:jy.DALoginNak.PID)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DALoginNak::set_pid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:jy.DALoginNak.PID)
}
inline std::string* DALoginNak::mutable_pid() {
  // @@protoc_insertion_point(field_mutable:jy.DALoginNak.PID)
  return _internal_mutable_pid();
}
inline const std::string& DALoginNak::_internal_pid() const {
  return pid_.Get();
}
inline void DALoginNak::_internal_set_pid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DALoginNak::_internal_mutable_pid() {
  _has_bits_[0] |= 0x00000001u;
  return pid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DALoginNak::release_pid() {
  // @@protoc_insertion_point(field_release:jy.DALoginNak.PID)
  if (!_internal_has_pid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DALoginNak::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:jy.DALoginNak.PID)
}

// required bool IsForceLogin = 3;
inline bool DALoginNak::_internal_has_isforcelogin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DALoginNak::has_isforcelogin() const {
  return _internal_has_isforcelogin();
}
inline void DALoginNak::clear_isforcelogin() {
  isforcelogin_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool DALoginNak::_internal_isforcelogin() const {
  return isforcelogin_;
}
inline bool DALoginNak::isforcelogin() const {
  // @@protoc_insertion_point(field_get:jy.DALoginNak.IsForceLogin)
  return _internal_isforcelogin();
}
inline void DALoginNak::_internal_set_isforcelogin(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isforcelogin_ = value;
}
inline void DALoginNak::set_isforcelogin(bool value) {
  _internal_set_isforcelogin(value);
  // @@protoc_insertion_point(field_set:jy.DALoginNak.IsForceLogin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace jy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sprotocol_2eproto
